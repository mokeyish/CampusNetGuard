<Application x:Class="CampusNetGuard.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             ShutdownMode="OnMainWindowClose"
             StartupUri="UIMain.xaml">

    <Application.Resources>
        <ResourceDictionary>
            <Style x:Key="ButtonFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#F3F3F3" Offset="0"/>
                <GradientStop Color="#EBEBEB" Offset="0.5"/>
                <GradientStop Color="#DDDDDD" Offset="0.5"/>
                <GradientStop Color="#CDCDCD" Offset="1"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>

            <Style x:Key="SimpleButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="border" Background="#FF86949E">
                                <Rectangle x:Name="rect" Fill="#FFF4F4F4" Height="Auto" RadiusY="1" RadiusX="1" Stroke="{x:Null}" Margin="1" Width="Auto"  />
                                <ContentPresenter x:Name="content"  Height="Auto" Width="Auto" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Fill" TargetName="rect" Value="#FFbee7fd"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="rect" Value="#FFF4F4F4"/>
                                    <Setter Property="Margin" TargetName="content" Value="2,1,0,0"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="#FF4fadd8"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>















            <Style x:Key="SuperCheckBoxStyle" TargetType="{x:Type CheckBox}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <StackPanel Orientation="Horizontal">
                                <Grid>
                                    <Rectangle Fill="#FFB9B9B9" Height="20" Width="50" RadiusX="3" RadiusY="3"/>
                                    <Rectangle x:Name="back" Fill="#FF858585" Height="12" RadiusY="3" RadiusX="3" Width="42" Margin="4,0" StrokeThickness="1"/>
                                    <Rectangle x:Name="sw" HorizontalAlignment="Right" Height="16" RadiusY="5" RadiusX="5" VerticalAlignment="Center" Width="25" Margin="3,0">
                                        <Rectangle.OpacityMask>
                                            <ImageBrush ImageSource="Resources/san1.png"/>
                                        </Rectangle.OpacityMask>
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="#FFAEACAC" Offset="0.793"/>
                                                <GradientStop Color="#FF636363" Offset="1"/>
                                                <GradientStop Color="#FFAAA5A5" Offset="0.137"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Grid>
                                <ContentPresenter HorizontalAlignment="Left" Height="Auto" VerticalAlignment="Center" Width="Auto" Margin="10,0,0,0"/>
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="HorizontalAlignment" TargetName="sw" Value="Left"/>
                                    <Setter Property="Fill" TargetName="back" Value="#FF3EB41B"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


















            <Style x:Key="SuperButonStyle" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="columnDefinition1" Width="0.982*"/>
                                    <ColumnDefinition x:Name="columnDefinition" Width="0.018*"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="{x:Null}" Fill="#FF09a3dc" Grid.ColumnSpan="2"/>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                                    <Setter Property="Fill" TargetName="rectangle" Value="#FF09a3dc"/>
                                </Trigger>
                                <Trigger Property="IsDefaulted" Value="True">
                                    <Setter Property="Fill" TargetName="rectangle" Value="#FF0DAD5F"/>
                                    <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                                    <Setter Property="Fill" TargetName="rectangle" Value="#FF3cc3f5"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                                    <Setter Property="Fill" TargetName="rectangle" Value="#FF098cbc"/>
                                    <Setter Property="Width" TargetName="columnDefinition" Value="Auto"/>
                                    <Setter Property="MinWidth" TargetName="columnDefinition" Value="0"/>
                                    <Setter Property="Width" TargetName="columnDefinition1" Value="*"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                                    <Setter Property="Fill" TargetName="rectangle" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>




























            <Style x:Key="RotateImageStyle" TargetType="{x:Type Image}">
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform />
                    </Setter.Value>
                </Setter>
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                <Style.Triggers>
                    <EventTrigger RoutedEvent="UIElement.MouseEnter">
                        <BeginStoryboard HandoffBehavior="Compose">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" By="90" Duration="0:0:0.1" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="UIElement.MouseLeave">
                        <BeginStoryboard HandoffBehavior="Compose">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" By="-90" Duration="0:0:0.1" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Style.Triggers>
            </Style>


























            <Style x:Key="ImageButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Rectangle x:Name="bg" Fill="#00F4F4F5" HorizontalAlignment="Left" Height="30" VerticalAlignment="Top" Width="30" RadiusX="2" RadiusY="2"/>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Fill" TargetName="bg" Value="#25F4F4F5"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="bg" Value="#50F4F4F5"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true"/>
                                <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="#ADADAD"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


















        </ResourceDictionary>
    </Application.Resources>
    
</Application>
